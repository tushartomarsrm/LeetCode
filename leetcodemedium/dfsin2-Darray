//word search 
Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCCED"
Output: true
if (dfs(board, word, i, j, 0, visited)) return true; //such that board[i][j]==word[0]

    private boolean dfs(char[][] board, String word, int i, int j, int k, boolean[][] visited) {
        if (i < 0 || i >= board.length || j < 0 || j >= board[0].length || visited[i][j] || board[i][j] != word.charAt(k)) {
            return false;
        }
        if (k == word.length() - 1) { //this is the most important part
            return true;
        }
        visited[i][j] = true;
        boolean res = dfs(board, word, i - 1, j, k + 1, visited) ||
                      dfs(board, word, i + 1, j, k + 1, visited) ||
                      dfs(board, word, i, j - 1, k + 1, visited) ||
                      dfs(board, word, i, j + 1, k + 1, visited);
        visited[i][j] = false;
        return res;
    }
}

//no of islands
class Solution {
    int temp[][];
    int count = 0;
    public int numIslands(char[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        temp = new int[m][n];
        for (int i=0;i<m;i++){
            for (int j=0;j<n;j++){
                if (temp[i][j]==0 && grid[i][j]=='1'){
                    floodFill(temp, grid, i, j);
                    count++;
                }
            }
        }
        return count;
    }

    public void floodFill(int [][]temp, char [][]grid, int i, int j){
        int m = grid.length;
        int n = grid[0].length;
        if (i<0 || i>=m || j<0 || j>=n || temp[i][j]==1 || grid[i][j]=='0') return;
        temp[i][j] = 1;
        floodFill(temp, grid, i+1, j);
        floodFill(temp, grid, i-1, j);
        floodFill(temp, grid, i, j+1);
        floodFill(temp, grid, i, j-1);
    }
}
