You are given a string s and an integer k. You can choose any character of the string and change it to any other uppercase English character. You can perform this operation at most k times.
Return the length of the longest substring containing the same letter you can get after performing the above operations.
Input: s = "ABAB", k = 2
Output: 4
Explanation: Replace the two 'A's with two 'B's or vice versa./**/
class Solution {
    public int characterReplacement(String s, int k) {
        int n = s.length(), maxLen = 0, ans = 0;
        int left = 0, right = 0;
        Map<Character, Integer> count = new HashMap<>();
        while (right < n) {
            count.put(s.charAt(right), count.getOrDefault(s.charAt(right), 0) + 1);
            maxLen = Math.max(maxLen, count.get(s.charAt(right)));
            
            if ((right - left + 1) - maxLen > k) {
                count.put(s.charAt(left), count.get(s.charAt(left)) - 1);
                left++;
            }
            
            ans = Math.max(ans, right - left + 1);
            right++;
        }
        
        return ans;
    }
}