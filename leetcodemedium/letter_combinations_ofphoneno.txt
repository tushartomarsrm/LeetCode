lst.add(new LinkedList<>(l)); // Create a copy of the list to avoid CHANGE to original list

//Input: digits = "23"
Output: ["ad","ae","af","bd","be","bf","cd","ce","cf"]
//digits[i] is a digit in the range ['2', '9'].
                // use      .    concept
                  a         b          c
            ad ae af    bd be bf    cd ce cf
class Solution {
    private static final Map<Character,String>phoneMap = new HashMap<>();
    static{
        phoneMap.put('2', "abc");phoneMap.put('3', "def");phoneMap.put('4', "ghi");phoneMap.put('5', "jkl");phoneMap.put('6', "mno");phoneMap.put('7', "pqrs");phoneMap.put('8', "tuv");phoneMap.put('9', "wxyz");
    }
    public List<String> letterCombinations(String digits) {
        List<String>result = new ArrayList<>();
        if(digits==null || digits.length()==0)
        {
            return result;
        }
        backtrack(result,new StringBuilder(),digits,0);
        return result;


    }

    private void backtrack(List<String>result , StringBuilder combination , String digits,int index)
    {
        if(index==digits.length())
        {
            result.add(combination.toString());
            return;
        }

        char d = digits.charAt(index);
        String letters =phoneMap.get(d);

        for(char l :letters.toCharArray())
        {
            combination.append(l);
            backtrack( result,combination,digits,index+1);
            combination.deleteCharAt(combination.length()-1);
        }
    }
}

//  Combination sum - wohi tree approach and 

    //no need of sorting candidates beacause they are already unique
    Input: candidates = [2,3,6,7], target = 7
    Output: [[2,2,3],[7]]
    public void find(int left, int right, int sum, List<Integer> poss, int[] candidates, int target, List<List<Integer>> lst) {
        if (sum == target) {
            lst.add(new LinkedList<>(poss));
            return;
        }
        if (sum > target) return;
        for (int i = left; i <= right; i++) {
            sum += candidates[i];
            poss.add(candidates[i]);
            find(i, right, sum, poss, candidates, target, lst);
            sum -= candidates[i];
            poss.remove(poss.size() - 1);
        }
    }

//combination sum 2
if candidates are not unique by number and each candidate can be used one
Input: candidates = [10,1,2,7,6,1,5], target = 8
Output: [[1,1,6],[1,2,5],[1,7],[2,6]]
  FIrst we have to SORT candidates and than pass it to funciton
for (int i = left; i <= right; i++) {
    if (i > left && candidates[i] == candidates[i - 1]) continue; // skip duplicates
    sum += candidates[i];
    poss.add(candidates[i]);
    find(i + 1, right, sum, poss, candidates, target, lst); // use i + 1 to avoid repeated usage of same element
    sum -= candidates[i];
    poss.remove(poss.size() - 1);
}


//all permutations
        if (valid.size() == nums.length) {
            lst.add(new LinkedList<>(valid)); // Create a copy of the list
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (valid.contains(nums[i])) continue; // Skip if already used important
            valid.add(nums[i]);
            ans(nums, valid, lst);
            valid.remove(valid.size() - 1);
        }


//all permuatations with duplicates element
sort(nums);
public void solve(int[] nums, boolean[] checked, List<Integer> ds, List<List<Integer>> res){
        if(ds.size()==nums.length){
            res.add(new ArrayList<Integer>(ds));
            return;
        }
        for(int i=0;i<nums.length;i++){
            if(checked[i]) continue;
            if(i>0 && nums[i-1]==nums[i] && !checked[i-1] ) continue;
            checked[i]=true;
            ds.add(nums[i]);
            solve(nums,checked,ds,res);
            checked[i]=false;
            ds.remove(ds.size()-1);
        }
    }
[1,1,2]   visited [f,f,f]    ans
1           t f f            
1 1         t t f            
1 1 2       t t t            [[1,1,2],]
1 2         t f t            
1 2 1       t t t            [[1,1,2],[1,2,1],]
            f f f       
1 (i=1) cant used since if(i>0 && nums[i-1]==nums[i] && !checked[i-1] ) continue;
2           f f t            
2 1         t f t
2 1 1       t t t                                 [[1,1,2],[1,2,1],[2,1,1]]
2 1         f t t this cant be done too so ans = 
   

//Input: n = 4, k = 2
Output: [[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]]
        if (l.size() == size) {
            lst.add(new LinkedList<>(l)); // Create a copy of the list to avoid CHANGE to original list
            return;
        }
        for (int i = start; i <= end; i++) {
            l.add(i);
            add(i + 1, end, size, l, lst); // Change start to i + 1
            l.remove(l.size() - 1);

//all subsets of a unique set [1,2] ans = [[],[1],[2],[1,2]]
        if (l.size() <= size) {
            lst.add(new LinkedList<>(l)); // Create a copy of the list
        }
        for (int i = start; i <= end; i++) {
            l.add(nums[i]);
            add(i + 1, end, size,nums, l, lst); // Change start to i + 1
            l.remove(l.size()-1);
        }

////subset2
    Input: nums = [1,2,2]
    Output: [[],[1],[1,2],[1,2,2],[2],[2,2]]
    public void backtrack(int start, int[] nums, List<Integer> current, List<List<Integer>> result) {
        result.add(new ArrayList<>(current));
        for (int i = start; i < nums.length; i++) {
            if (i > start && nums[i] == nums[i - 1] ) continue; // Skip duplicates
            current.add(nums[i]);
            backtrack(i + 1, nums, current, result);
            current.remove(current.size() - 1);
        }
    }