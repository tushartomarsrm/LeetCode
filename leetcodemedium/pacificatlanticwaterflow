Pacific matrix:
[[false, false, false, false, false],
 [false, false, false, false, false],
 [false, false, false, false, false],
 [false, false, false, false, false],
 [false, false, false, false, false]]
Atlantic matrix:
[[false, false, false, false, false],
 [false, false, false, false, false],
 [false, false, false, false, false],
 [false, false, false, false, false],
 [false, false, false, false, false]]
Step 2: Perform DFS from Pacific borders
Start from the left border (column 0) and perform DFS for each cell:
[[1, 2, 2, 3, 5],
 [3, 2, 3, 4, 4],
 [2, 4, 5, 3, 1],
 [6, 7, 1, 4, 5],
 [5, 1, 1, 2, 4]]
Mark cells that can flow to Pacific:
Pacific matrix:
[[true, true, true, true, true],
 [true, true, true, true,true],
 [true, true, true, false, false],
 [true, true, false, false, false],
 [true, false, false, false, false]]
Step 3: Perform DFS from Atlantic borders
Start from the right border (column 4) and perform DFS for each cell:
[[1, 2, 2, 3, 5],
 [3, 2, 3, 4, 4],
 [2, 4, 5, 3, 1],
 [6, 7, 1, 4, 5],
 [5, 1, 1, 2, 4]]
Mark cells that can flow to Atlantic:
Atlantic matrix:
[[false, false, false, false, true],
 [false, false, false, true, true],
 [false, false, true, true, true],
 [true, true, true, true, true],
 [true, true, true, true, true]]
Step 4: Find common cells
Compare Pacific and Atlantic matrices to find cells that can flow to both:
Common cells:
[[0, 4], [1, 3], [1, 4], [2, 2], [3, 0], [3, 1], [4, 0]]

Input: heights = [[1,2,2,3,5]
                , [3,2,3,4,4],
                  [2,4,5,3,1],
                  [6,7,1,4,5],
                  [5,1,1,2,4]]
Output: [[0,4],[1,3],[1,4],[2,2],[3,0],[3,1],[4,0]]
class Solution {
    public List<List<Integer>> pacificAtlantic(int[][] heights) {
        int m = heights.length;
        int n = heights[0].length;
        boolean[][] pacific = new boolean[m][n];
        boolean[][] atlantic = new boolean[m][n];
        List<List<Integer>> result = new ArrayList<>();

        // Pacific DFS
        for (int i = 0; i < m; i++) {
            dfs(heights, pacific, i, 0);
        }
        for (int i = 0; i < n; i++) {
            dfs(heights, pacific, 0, i);
        }

        // Atlantic DFS
        for (int i = 0; i < m; i++) {
            dfs(heights, atlantic, i, n - 1);
        }
        for (int i = 0; i < n; i++) {
            dfs(heights, atlantic, m - 1, i);
        }

        // Find common cells
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (pacific[i][j] && atlantic[i][j]) {
                    result.add(Arrays.asList(i, j));
                }
            }
        }

        return result;
    }

    private void dfs(int[][] heights, boolean[][] visited, int i, int j) {
        int m = heights.length;
        int n = heights[0].length;
        if (i < 0 || i >= m || j < 0 || j >= n || visited[i][j]) {
            return;
        }
        visited[i][j] = true;
        int currentHeight = heights[i][j];
        if (i > 0 && heights[i - 1][j] >= currentHeight) {
            dfs(heights, visited, i - 1, j);
        }
        if (i < m - 1 && heights[i + 1][j] >= currentHeight) {
            dfs(heights, visited, i + 1, j);
        }
        if (j > 0 && heights[i][j - 1] >= currentHeight) {
            dfs(heights, visited, i, j - 1);
        }
        if (j < n - 1 && heights[i][j + 1] >= currentHeight) {
            dfs(heights, visited, i, j + 1);
        }
    }
}
