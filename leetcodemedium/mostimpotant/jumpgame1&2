//Input: nums = [2,3,1,1,4]
Output: 2
Explanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, 
then 3 steps to the last index.

class Solution {
    public int jump(int[] A) {
	int jumps = 0, curEnd = 0, curFarthest = 0;
	for (int i = 0; i < A.length - 1; i++) {
		curFarthest = Math.max(curFarthest, i + A[i]);
		if (i == curEnd) {
			jumps++;
			curEnd = curFarthest;
		}
	}
	return jumps;
}
}

//jumpgame1
class Solution {
    public boolean canJump(int[] nums) {
        int l = nums.length - 1;
        int sl = l - 1;
        for (int i = sl; i >= 0; i--) {
            if (i + nums[i] >= l) {
                l = i;
            }
        }
        return l == 0;
    }
}




