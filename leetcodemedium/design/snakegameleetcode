public class SnakeGame {
    private int width, height;
    private int[][] food;
    private int foodIndex;
    private Set<Integer> set;
    private int score;
    private int[][] directions = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};

    public SnakeGame(int width, int height, int[][] food) {
        this.width = width;
        this.height = height;
        this.food = food;
        foodIndex = 0;
        set = new HashSet<>();
        set.add(0);
        score = 0;
    }

    public int move(String direction) {
        int[] head = getHead();
        int newX = head[0] + directions[getDirection(direction)][0];
        int newY = head[1] + directions[getDirection(direction)][1];
        if (newX < 0 || newX >= height || newY < 0 || newY >= width) {
            return -1;
        }
        if (foodIndex < food.length && newX == food[foodIndex][0] && newY == food[foodIndex][1]) {
            foodIndex++;
            score++;
        } else {
            set.remove(getIndex(head[0], head[1]));
        }
        if (!set.add(getIndex(newX, newY))) {
            return -1;
        }
        return score;
    }

    private int[] getHead() {
        for (int index : set) {
            int row = index / width;
            int col = index % width;
            return new int[]{row, col};
        }
        return null;
    }

    private int getDirection(String direction) {
        switch (direction) {
            case "U":
                return 3;
            case "D":
                return 0;
            case "L":
                return 1;
            case "R":
                return 2;
            default:
                return -1;
        }
    }

    private int getIndex(int row, int col) {
        return row * width + col;
    }
}
