You are given n balloons, indexed from 0 to n - 1. Each balloon is painted with a number on it represented by an array nums. You are asked to burst all the balloons.
If you burst the ith balloon, you will get nums[i - 1] * nums[i] * nums[i + 1] coins. If i - 1 or i + 1 goes out of bounds of the array, then treat it as if there is a balloon with a 1 painted on it.
Return the maximum coins you can collect by bursting the balloons wisely.

 

Example 1:

Input: nums = [3,1,5,8]
Output: 167
Explanation:
nums = [3,1,5,8] --> [3,5,8] --> [3,8] --> [8] --> []
coins =  3*1*5    +   3*5*8   +  1*3*8  + 1*8*1 = 167
Example 2:

Input: nums = [1,5]
Output: 10

ballons: [1,3,1,5,8,1]

   0 1 2 3 4 5
0  
1
2
3
4
5

class Solution {
    public int maxCoins(int[] nums) {
        int n = nums.length;
        int[][] dp = new int[n+2][n+2];
        int[] arr = new int[n+2];
        for(int i = 1 ; i <= n ; i++)
        {
            arr[i] = nums[i-1];
        }
        arr[0] = 1;
        arr[n+1] = 1;
        i= n se 1
        j = 1 se n 
        k = i se j
        for(int i = n ; i >= 1 ; i--){
            for(int j = i ; j <= n ; j++)
            {
                for(int k = i ; k <= j ; k++)
                {
                    dp[i][j] = (int)Math.max(dp[i][j] ,dp[i][k-1]+ arr[i-1]*arr[k]*arr[j+1] + dp[k+1][j]);
                }
            }
        }
        
        return dp[1][n];
    }
}