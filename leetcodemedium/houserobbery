//198. House Robber
//Input: nums = [1,2,3,1]
//Output: 4
//it will automatically contact the police if two adjacent houses were broken into on the same night.
//return the maximum amount of money you can rob tonight without alerting the police.
Example 1:

Input: nums = [1,2,3,1]
[1]->[1,2]->[1,2,4]->[1,2,4,4] ans = 4
Output: 4
Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).
Total amount you can rob = 1 + 3 = 4.
Example 2:

Input: nums = [2,7,9,3,1]
[2,7,11,11,12] ans = 12
Output: 12
Explanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1).
Total amount you can rob = 2 + 9 + 1 = 12.
class Solution {
    public int rob(int[] nums) {
        //1 2 3 1 //initially preprev = 0 prev = nums[0]   ans = max(dp[i-1],nums[i]+dp[i-2])
        //1 2 4 4
        int prev = nums[0]; //niche case mai ye zero hoga
        int preprev = 0;
        for (int i=1;i<nums.length;i++){
            int temp = Math.max(nums[i]+preprev,prev);
            preprev=prev;
            prev = temp;
        }
        return prev;
    }
}


//agr ye eek circle mai hai array tab -
class Solution {
    public int rob(int[] nums) {
        if (nums.length == 1) return nums[0];
        return Math.max(getMax(nums, 0, nums.length - 2), getMax(nums, 1, nums.length - 1));        
    }

    private int getMax(int[] nums, int start, int end) {
        int prev = 0; //NOTE THIS IS SET AS 0 HERE VERY IMPORTANT
        int preprev = 0;
        for (int i = start; i <= end; i++) {
            int temp = Math.max(prev, preprev + nums[i]);
            preprev=prev;
            prev = temp;
        }
        return prev;
    }    
}
