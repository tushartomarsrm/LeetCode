/*105. Construct Binary Tree from Preorder and Inorder Traversal
Input: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]
Output: [3,9,20,null,null,15,7]*/
class Solution {
    private int i = 0;
    private int p = 0;

    public TreeNode buildTree(int[] preorder, int[] inorder) {
        return build(preorder, inorder, Integer.MIN_VALUE);
    }

    private TreeNode build(int[] preorder, int[] inorder, int stop) {
        if (p >= preorder.length) {
            return null;
        }
        if (inorder[i] == stop) {
            ++i;
            return null;
        }

        TreeNode node = new TreeNode(preorder[p++]);
        node.left = build(preorder, inorder, node.val);
        node.right = build(preorder, inorder, stop);
        return node;
    }
}

//106. Construct Binary Tree from Inorder and Postorder Traversal
/*Input: inorder = [9,3,15,20,7], postorder = [9,15,7,20,3]
Output: [3,9,20,null,null,15,7]*/
class Solution {
    int postPointer=0;
    int inPointer=0;
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        postPointer=inorder.length;
        inPointer=inorder.length-1;
        return build(inorder,postorder,Integer.MAX_VALUE);
    }
    public TreeNode build(int[] inOrder,int[] postOrder,int last){
        if(postPointer<0 || inPointer<0){
            return null;
        }
        if(inOrder[inPointer]==last){
            inPointer-=1;
            return null;
        }
        postPointer-=1;
        TreeNode root=new TreeNode(postOrder[postPointer]);
        root.right=build(inOrder,postOrder,root.val);
        root.left=build(inOrder,postOrder,last);
        return root;
    }
}