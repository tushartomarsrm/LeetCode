////80. Remove Duplicates from Sorted Array II
Input: nums = [1,1,1,2,2,3]
Output: 5, nums = [1,1,2,2,3,_]
        int i = 2;
        for (int j = 2; j < nums.length; j++) {
            if (nums[j] != nums[i-2]) {
                nums[i] = nums[j];
                i++;
            }
        }
        return i;


//are bhaiii   
//add two number without plus and star
class Solution {
    public int getSum(int a, int b) {
        while (b != 0) {
            int tmp = (a & b) << 1;
            a = a ^ b;
            b = tmp;
        }
        return a;
    }
}


//Longest Substring Without Repeating Characters
        while (set.contains(ch)) {
                set.remove(s.charAt(left));
                left++;
            }
            Input: s = "pwwkew"
            Output: 3

//Longest Palindromic Substring

            expandPalindrome(input, i, i);
            expandPalindrome(input, i, i+1);
        ans is return s.substring(lo, lo+maxLen);

//Container With Most Water
just use left<right and change the smaller pointer first (either left++ if small or right-- if small 
and LEFT++ if equal)
Input: height = [1,8,6,2,5,4,8,3,7]    
Output: 49   MIN(8,7)*7      where 2nd seven is distance between 8 and 7

//Integer to roman
int []digit = {1,4,5,9,10,40,50,90,100,400,500,900,1000};
int end = 12;
String []chr = {"I","IV","V","IX","X","XL","L","XC","C","CD","D","CM","M"};
while (end>=0){}
Input: num = 3749
Output: "MMMDCCXLIX"
       M  +   M  +  M  +  D   + C  +  C   + XL   + IX
3749  2749  1749   749   249    149   49    9       0


//3 sum closest or equal sum :
Input: nums = [-1,2,1,-4], target = 1
Output: 2
Explanation: The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).
either do it by using sorting first and than using i , 
left and right pointer  && current_sum = nums[i] + nums[left] + nums[right]
if abs(current_sum - target) < abs(closest_sum - target):
or do it by brute force method


//try to use dummy.next = head

//first position or first insertion position in a sorted array with dupicates
if (arr[mid] == target) {
    if (mid == 0 || arr[mid - 1] != target) {
        first = mid;
        break;
    }
        r = mid - 1;

        //last " " - 
    if (mid == n - 1 || arr[mid + 1] != target) {
        last = mid;
        break;
    } 
        l = mid + 1;

//validating sudoku filled part only -
for (int i=0; i<9; ++i) {
    for (int j=0; j<9; ++j) {
        if (board[i][j] != '.') {
            String b = "(" + board[i][j] + ")";
            if (!seen.add(i+b) || !seen.add(b+j) || !seen.add(i/3 + b + j/3))
                return false;
        }
    }
}

// 11223344    - length = 8
for i=1 to n: #not n-1
    int count=1
    if (i==n || arr[i]!=arr[i-1]){
        sb.append(count);sb.append(s.charAt(i-1));count=1;
    }else{count++};
so sb.toString() = 21222324  ans



//rotate a matrix 90 degree clockwise means first transpose and than reverse rows
Input: matrix = [[1,2, 3],
                 [4,5,6],
                 [7,8,9]]
Output: [[7,4,1],[8,5,2],[9,6,3]]

//anagrams:
Input: strs = ["eat","tea","tan","ate","nat","bat"]
Output: [["bat"],["nat","tan"],["ate","eat","tea"]]
        char[] charArray = str.toCharArray();
        Arrays.sort(charArray);
        String sortedStr = new String(charArray);

solution:Map<String,List<String>>{
    "abt":["bat"],          mp.get.add  etc
    "ant":["nat","tan"],
    "aet":["ate","eat","tea"]
}


//linkedlist ; index after k rotations
(n+k)%n  
beacuse k may be greater than n so this is best 



//73. Set Matrix Zeroes
Given an m x n integer matrix matrix, if an element is 0, set its entire row and column to 0's.
Input: matrix = [[1,1,1],[1,0,1],[1,1,1]]
Output: [[1,0,1],[0,0,0],[1,0,1]]
l.add(Arrays.asList(i,j)); //list of list of indices having zero initially
using that list in next loop with i,j - set corresponding rows coloums zero 



//class Solution {
    TreeNode prev = null;
    public boolean isValidBST(TreeNode root) {
        if (root == null) return true; // Base case: Agar tree null hai, toh valid BST hai
        // Pehle left subtree check karenge
        if (!isValidBST(root.left)) return false;
        // Inorder mein har node ki value previous node se badi honi chahiye
        if (prev != null && prev.val >= root.val) return false;
        // Current node ko prev mein store kar lenge
        prev = root;
        // Ab right subtree check karenge
        return isValidBST(root.right);
    }
}

//level order traversal is done by Queue<ListNode> and starting process by que.offer(node)



//Input: numCourses = 2, prerequisites = [[1,0],[0,1]]
Output: false
Explanation: There are a total of 2 courses to take. 
To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.
logic hai kuch ki adjaceny list bnake one by one node daalna aur check krna ki cycle to nhi bn rhi na

//duplicate number in array
        int n = nums.length;
        for (int i=0;i<n;i++){
            if (nums[Math.abs(nums[i])-1]<0) return Math.abs(nums[i]);
            nums[Math.abs(nums[i])-1]*=-1;
        }
        return -1;

//WATER  JUG PROBLEM
if (target > x + y) return false;
if (target == 0) return true;
if target%gcd(x,y)==0 return true;
return false
private int gcd(int a, int b) {
    if (b==0) return a;
    return gcd(b,a%b);
}


