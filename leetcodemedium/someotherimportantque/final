//1689. Partitioning Into Minimum Number Of Deci-Binary Numbers
Input: n = "32"
Output: 3
Explanation: 10 + 11 + 11 = 32
Example 2:
Input: n = "82734"
Output: 8
Example 3:
    10000
    10100
    10100
    10100
    10101
    10111
    11111
    11111
thus we have to return the maximum of all the digit in n i.e 9

////1379. Find a Corresponding Node of a Binary Tree in a Clone of That Tree
class Solution {
    public final TreeNode getTargetCopy(final TreeNode original, final TreeNode cloned, final TreeNode target) {
        if (original == null || cloned == null) return null;
        if (original == target) return cloned;
        TreeNode left = getTargetCopy(original.left, cloned.left, target);
        if (left != null) return left;
        return getTargetCopy(original.right, cloned.right, target);
    }
}

//reveal cards letcode medium
input:17 13 11 2 3 5 7
output:2 13 3 11 5 17 7
ham top ko reveal krenge aur dusre ko piche daaldenge hmme now cads ko increading order mai hi reveal krna hai
Example
revealed      queue
             2 13 3 11 5 17 7
2            3 11 5 17 7 13
3            5 17 7 13 11
5            7 13 11 17
7            11 17 13
11           13 17
13           17
17
sort(input) = 2 3 5 7 11 13 17
put them in deque - 
            sort(deck.begin(),deck.end()); //sort the array
            for(int i = deck.size()-1;i>=0;i--){
                if(!qp.empty()){ 
                    qp.push(qp.front()); // push the top element
                    qp.pop(); // pop the element
                }
                qp.push(deck[i]); // then push new element
            }

//reduntant connectionsn name s eek que hai usmai 2d array diya hua hailike - 
[[1,2],[1,3],[2,3]]
esmai hmme one by one edge create krne hai aur jo phela array cycle form krdega usse return krna hai
ex -    1-2
        \
          3     now 2 when conected to 3 will form a cycle so its redundant and return [2,3]

//public class Solution {
    public int numberOfArithmeticSlices(int[] nums) {
        if (nums.length < 3)
            return 0;

        int c = 0,
            ind = 0;
        int prevDiff = nums[1] - nums[0];
        for (int i = 1; i < nums.length - 1; i++)
        {
            int curDiff = nums[i + 1] - nums[i];
            if (curDiff == prevDiff) ind++;
            else ind = 0;
            c += ind;
            prevDiff = curDiff;
        }
        return c;
    }
}

