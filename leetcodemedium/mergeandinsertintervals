//merge interavls
class Solution {
    public int[][] merge(int[][] intervals) {
        Arrays.sort(intervals, (a, b) -> Integer.compare(a[0], b[0]));
        LinkedList<int[]> result = new LinkedList<>(); //important
        result.add(intervals[0]);
        for (int i = 1; i < intervals.length; i++) {
            int[] lastAddedInterval = result.getLast();
            if (lastAddedInterval[1] >= intervals[i][0]) {
                lastAddedInterval[1] = Math.max(lastAddedInterval[1], intervals[i][1]);//pass by reference
            } else {
                result.add(intervals[i]);
            }
        }
        return result.toArray(new int[result.size()][]); //linkedlist to array
    }
}

//lefttttttttttttttttttttttttt
//insert intervals
Input: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]
output:[[1,2],[3,10],[12,16]]

//intervals is sorted in ascending order by starti
class Solution {
    public int[][] insert(int[][] intervals, int[] newInterval) {
        List<int[]> mergedIntervals = new ArrayList<>();
        int n = intervals.length;
        int i = 0;

        // Add all intervals before the newInterval starts
        while (i < n && intervals[i][1] < newInterval[0]) {
            mergedIntervals.add(intervals[i]);
            i++;
        }
        // Merge all overlapping intervals with newInterval
        while (i < n && intervals[i][0] <= newInterval[1]) {
            newInterval[0] = Math.min(newInterval[0], intervals[i][0]);
            newInterval[1] = Math.max(newInterval[1], intervals[i][1]);
            i++;
        }
        mergedIntervals.add(newInterval);
        while (i < n) {
            mergedIntervals.add(intervals[i]);
            i++;
        }
        return mergedIntervals.toArray(new int[mergedIntervals.size()][]);
    }
}
